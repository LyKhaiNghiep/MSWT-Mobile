import {ILoginRequest} from '../config/models/auth.model';
import {UserData} from '../config/models/user.model';
import {API_URLS} from '../constants/api-urls';
import {StorageUtil} from '../utils/storage';
import api from './api';
import {jwtDecode} from 'jwt-decode';

// JWT payload interface based on the screenshot
interface JWTPayload {
  sub: string;
  jti: string;
  User_Id: string;
  Username: string;
  'http://schemas.microsoft.com/ws/2008/06/identity/claims/role': string;
  exp: number;
  iss: string;
  aud: string;
}

// Authentication Service - Backend x·ª≠ l√Ω authentication trong USER endpoints
export const authService = {
  // Login with username and password - S·ª≠ d·ª•ng USER.LOGIN endpoint
  async login(credentials: ILoginRequest) {
    try {
      console.log('üîê Attempting login with backend API...', credentials);

      const response = await api.post(API_URLS.USER.LOGIN, {
        userName: credentials.username,
        password: credentials.password,
      });

      console.log('‚úÖ Login API Response:', response.data);

      // Log to√†n b·ªô structure ƒë·ªÉ debug
      console.log(
        'üîç Full response structure:',
        JSON.stringify(response.data, null, 2),
      );

      // Backend tr·∫£ v·ªÅ JWT token string
      if (response.data && typeof response.data === 'string') {
        const token = response.data;
        console.log('üîë Received JWT token:', token.substring(0, 50) + '...');

        try {
          // Decode JWT token to get user information
          const decodedToken = jwtDecode<JWTPayload>(token);
          console.log('üîì Decoded JWT payload:', decodedToken);

          const userId = decodedToken.User_Id;
          const username = decodedToken.Username;
          const role =
            decodedToken[
              'http://schemas.microsoft.com/ws/2008/06/identity/claims/role'
            ];

          console.log('üìã Extracted from JWT:', {
            userId,
            username,
            role,
            exp: new Date(decodedToken.exp * 1000),
          });

          // Store token first
          await StorageUtil.setToken(token);

          // Fetch full user data using userId from JWT
          console.log('üìã Fetching user data with userId:', userId);
          const userResponse = await api.get(API_URLS.USER.GET_BY_ID(userId));

          console.log('‚úÖ User data API response:', userResponse.data);

          if (userResponse.data) {
            const user = userResponse.data;

            // Process the user data from API response
            const userData = {
              userId: user.userId,
              userName: user.userName,
              fullName: user.fullName,
              email: user.email,
              phone: user.phone,
              address: user.address,
              status: user.status,
              image: user.image,
              roleId: user.roleId,
              createAt: user.createAt || new Date().toISOString(),
              roleName: user.roleName || this.mapRoleIdToRoleName(user.roleId),
              description:
                user.description || this.mapRoleIdToDescription(user.roleId),
              rating: user.rating || null,
              reasonForLeave: user.reasonForLeave || null,
              password: user.password || '',
              role: user.roleName || this.mapRoleIdToRoleName(user.roleId),
              position: this.mapRoleIdToPosition(user.roleId),
            } as UserData;

            console.log('‚úÖ Processed user data:', userData);
            console.log('üé≠ Final role:', userData.role);
            console.log('üíº Final position:', userData.position);

            await StorageUtil.setUserData(userData);

            return {
              success: true,
              data: {
                token,
                user: userData,
              },
            };
          } else {
            throw new Error('No user data returned from API');
          }
        } catch (jwtError) {
          console.error('‚ùå JWT decoding or user fetching error:', jwtError);

          // Fallback: create basic user data from JWT if API call fails
          try {
            const decodedToken = jwtDecode<JWTPayload>(token);
            const userId = decodedToken.User_Id;
            const username = decodedToken.Username;
            const jwtRole =
              decodedToken[
                'http://schemas.microsoft.com/ws/2008/06/identity/claims/role'
              ];

            const fallbackUserData = {
              userId: userId,
              userName: username,
              fullName: username,
              email: '',
              phone: '',
              address: '',
              status: 'Ho·∫°t ƒë·ªông',
              image: '',
              roleId: this.mapRoleNameToRoleId(jwtRole),
              createAt: new Date().toISOString(),
              roleName: jwtRole,
              description: this.mapRoleNameToDescription(jwtRole),
              rating: null,
              reasonForLeave: null,
              password: '',
              role: jwtRole,
              position: this.mapRoleNameToPosition(jwtRole),
            } as UserData;

            console.log(
              '‚ö†Ô∏è Using fallback user data from JWT:',
              fallbackUserData,
            );
            await StorageUtil.setUserData(fallbackUserData);

            return {
              success: true,
              data: {
                token,
                user: fallbackUserData,
              },
            };
          } catch (fallbackError) {
            console.error('‚ùå Fallback also failed:', fallbackError);
            return {
              success: false,
              error: 'Kh√¥ng th·ªÉ x·ª≠ l√Ω th√¥ng tin ƒëƒÉng nh·∫≠p',
            };
          }
        }
      }
      // Legacy case: Backend tr·∫£ v·ªÅ user object tr·ª±c ti·∫øp
      else if (
        response.data &&
        typeof response.data === 'object' &&
        response.data.userId
      ) {
        const user = response.data;

        console.log('üîç Backend user data (legacy):', user);

        // Generate a token for storage (you might want to get this from headers or another endpoint)
        const token = `user_token_${user.userId}_${Date.now()}`;

        // Store token
        await StorageUtil.setToken(token);

        // X·ª≠ l√Ω user data t·ª´ backend response
        const userData = {
          userId: user.userId,
          userName: user.userName,
          fullName: user.fullName,
          email: user.email,
          phone: user.phone,
          address: user.address,
          status: user.status,
          image: user.image,
          roleId: user.roleId,
          createAt: user.createAt || new Date().toISOString(),
          roleName: user.roleName || this.mapRoleIdToRoleName(user.roleId),
          description:
            user.description || this.mapRoleIdToDescription(user.roleId),
          rating: user.rating || null,
          reasonForLeave: user.reasonForLeave || null,
          password: user.password || '',
          role: user.roleName || this.mapRoleIdToRoleName(user.roleId),
          position: this.mapRoleIdToPosition(user.roleId),
        } as UserData;

        console.log('‚úÖ Processed user data (legacy):', userData);

        await StorageUtil.setUserData(userData);

        return {
          success: true,
          data: {
            token,
            user: userData,
          },
        };
      }
      // Legacy case: Backend tr·∫£ v·ªÅ object v·ªõi token v√† user
      else if (response.data && response.data.token && response.data.user) {
        const {token, user} = response.data;

        console.log('üîç Backend user data (legacy token+user):', user);

        // Store token
        await StorageUtil.setToken(token);

        // X·ª≠ l√Ω user data t·ª´ backend response
        const userData = {
          userId: user.userId,
          userName: user.userName,
          fullName: user.fullName,
          email: user.email,
          phone: user.phone,
          address: user.address,
          status: user.status,
          image: user.image,
          roleId: user.roleId,
          createAt: user.createAt || new Date().toISOString(),
          roleName: user.roleName || this.mapRoleIdToRoleName(user.roleId),
          description:
            user.description || this.mapRoleIdToDescription(user.roleId),
          rating: user.rating || null,
          reasonForLeave: user.reasonForLeave || null,
          password: user.password || '',
          role: user.roleName || this.mapRoleIdToRoleName(user.roleId),
          position: this.mapRoleIdToPosition(user.roleId),
        };

        console.log('‚úÖ Processed user data (legacy token+user):', userData);

        await StorageUtil.setUserData(userData);

        return {
          success: true,
          data: {
            token,
            user: userData,
          },
        };
      } else {
        return {
          success: false,
          error:
            'Ph·∫£n h·ªìi t·ª´ server kh√¥ng h·ª£p l·ªá - kh√¥ng c√≥ d·ªØ li·ªáu ng∆∞·ªùi d√πng',
        };
      }
    } catch (error: any) {
      // Handle different error responses
      if (error.response) {
        const status = error.response.status;
        const message =
          error.response.data?.message || error.response.data?.errors?.[0];

        switch (status) {
          case 400:
            return {
              success: false,
              error: message || 'D·ªØ li·ªáu ƒëƒÉng nh·∫≠p kh√¥ng h·ª£p l·ªá',
            };
          case 401:
            return {
              success: false,
              error: message || 'T√†i kho·∫£n ho·∫∑c m·∫≠t kh·∫©u kh√¥ng ƒë√∫ng',
            };
          case 403:
            return {
              success: false,
              error:
                message || 'T√†i kho·∫£n b·ªã kh√≥a ho·∫∑c kh√¥ng c√≥ quy·ªÅn truy c·∫≠p',
            };
          case 500:
            return {
              success: false,
              error: message || 'L·ªói h·ªá th·ªëng, vui l√≤ng th·ª≠ l·∫°i sau',
            };
          default:
            return {
              success: false,
              error: message || 'ƒêƒÉng nh·∫≠p th·∫•t b·∫°i',
            };
        }
      } else if (error.request) {
        return {
          success: false,
          error:
            'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server. Vui l√≤ng ki·ªÉm tra k·∫øt n·ªëi m·∫°ng.',
        };
      } else {
        return {
          success: false,
          error: 'ƒê√£ c√≥ l·ªói x·∫£y ra trong qu√° tr√¨nh ƒëƒÉng nh·∫≠p',
        };
      }
    }
  },

  // Register new user - S·ª≠ d·ª•ng USER.REGISTER endpoint
  async register(userData: UserData) {
    try {
      console.log('üìù Attempting registration with backend API...', userData);

      const response = await api.post(API_URLS.USER.REGISTER, {
        userName: userData.userName,
        password: userData.password,
        fullName: userData.fullName,
        email: userData.email,
        phone: userData.phone,
        address: userData.address,
        roleId: userData.roleId || 'c2a66975-420d-4961-9edd-d5bdff89be58', // Default to worker role
      });

      console.log('‚úÖ Registration API Response:', response.data);

      return {
        success: true,
        data: response.data,
      };
    } catch (error: any) {
      console.error('‚ùå Registration API Error:', error);

      if (error.response) {
        const message =
          error.response.data?.message || error?.response.data?.errors?.[0];
        return {
          success: false,
          error: message || 'ƒêƒÉng k√Ω th·∫•t b·∫°i',
        };
      }

      return {
        success: false,
        error: 'Kh√¥ng th·ªÉ k·∫øt n·ªëi ƒë·∫øn server',
      };
    }
  },

  async logout() {
    try {
      console.log('üö™ Logging out - clearing local storage...');
    } catch (error) {
      console.error('Logout error (non-critical):', error);
    } finally {
      // Always clear local storage
      await StorageUtil.clear();
    }
  },

  // Get current user profile - C√≥ th·ªÉ s·ª≠ d·ª•ng USER.GET_BY_ID n·∫øu c·∫ßn
  async getCurrentUser() {
    try {
      const userData = await StorageUtil.getUserData<UserData>();
      if (userData) {
        const user = userData;

        return {
          success: true,
          data: user,
        };
      } else {
        return {
          success: false,
          error: 'Kh√¥ng t√¨m th·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
        };
      }
    } catch (error) {
      console.error('Get current user error:', error);
      return {
        success: false,
        error: 'Kh√¥ng th·ªÉ l·∫•y th√¥ng tin ng∆∞·ªùi d√πng',
      };
    }
  },

  // Helper function to map roleId to role name
  mapRoleIdToRoleName(roleId: string) {
    const roleMap: any = {
      '0ecdd2e4-d5dc-48b4-8006-03e6b4868e75': 'Leader', // Qu·∫£n tr·ªã h·ªá th·ªëng
      '5b7a2bcd-9f5e-4f0e-8e47-2a15bcf85e37': 'Manager', // Qu·∫£n l√Ω c·∫•p cao
      '7dcd71ae-17c3-4e84-bb9f-dd96fa401976': 'Supervisor', // Gi√°m s√°t vi√™n v√† sinh
      'c2a66975-420d-4961-9edd-d5bdff89be58': 'Worker', // Nh√¢n vi√™n v·ªá sinh
    };
    return roleMap[roleId] || 'Worker';
  },

  // Helper function to map roleId to position (Vietnamese)
  mapRoleIdToPosition(roleId: string) {
    const positionMap: any = {
      '0ecdd2e4-d5dc-48b4-8006-03e6b4868e75': 'Qu·∫£n tr·ªã h·ªá th·ªëng',
      '5b7a2bcd-9f5e-4f0e-8e47-2a15bcf85e37': 'Qu·∫£n l√Ω c·∫•p cao',
      '7dcd71ae-17c3-4e84-bb9f-dd96fa401976': 'Gi√°m s√°t vi√™n v√† sinh',
      'c2a66975-420d-4961-9edd-d5bdff89be58': 'Nh√¢n vi√™n v·ªá sinh',
    };
    return positionMap[roleId] || 'Nh√¢n vi√™n v·ªá sinh';
  },

  // Helper function to map roleId to description
  mapRoleIdToDescription(roleId: string) {
    const descriptionMap: any = {
      '0ecdd2e4-d5dc-48b4-8006-03e6b4868e75': 'Qu·∫£n tr·ªã h·ªá th·ªëng',
      '5b7a2bcd-9f5e-4f0e-8e47-2a15bcf85e37': 'Qu·∫£n l√Ω c·∫•p cao',
      '7dcd71ae-17c3-4e84-bb9f-dd96fa401976': 'Gi√°m s√°t vi√™n v√† sinh',
      'c2a66975-420d-4961-9edd-d5bdff89be58': 'Nh√¢n vi√™n v·ªá sinh',
    };
    return descriptionMap[roleId] || 'Nh√¢n vi√™n v·ªá sinh';
  },

  // Helper function to map position to roleId
  mapPositionToRoleId(position: string) {
    const roleIdMap: any = {
      'Qu·∫£n tr·ªã h·ªá th·ªëng': '0ecdd2e4-d5dc-48b4-8006-03e6b4868e75',
      'Qu·∫£n l√Ω c·∫•p cao': '5b7a2bcd-9f5e-4f0e-8e47-2a15bcf85e37',
      'Gi√°m s√°t vi√™n v√† sinh': '7dcd71ae-17c3-4e84-bb9f-dd96fa401976',
      'Nh√¢n vi√™n v·ªá sinh': 'c2a66975-420d-4961-9edd-d5bdff89be58',
    };
    return roleIdMap[position] || 'c2a66975-420d-4961-9edd-d5bdff89be58';
  },

  // Check if user is authenticated
  async isAuthenticated() {
    const token = await StorageUtil.getToken();
    const userData = await StorageUtil.getUserData<UserData>();

    if (!token || !userData) {
      return false;
    }

    // Additional check: Only Leaders can access this system
    try {
      const user = userData;
      if (user.role !== 'Leader') {
        console.log('‚ùå Authentication failed - User is not a Leader');
        // Clear invalid user data
        this.logout();
        return false;
      }
      return true;
    } catch (error) {
      console.error('Error parsing user data:', error);
      return false;
    }
  },

  async getCurrentUserFromStorage() {
    try {
      const userData = await StorageUtil.getUserData<UserData>;
      return userData;
    } catch (error) {
      console.error('Error parsing user data from storage:', error);
      return null;
    }
  },

  // Helper function to guess role based on username pattern
  guessRoleFromUsername(username: string) {
    const lowerUsername = username.toLowerCase();

    // Pattern matching cho role d·ª±a tr√™n username
    if (
      lowerUsername.includes('leader') ||
      lowerUsername.includes('admin') ||
      lowerUsername.includes('system')
    ) {
      return '0ecdd2e4-d5dc-48b4-8006-03e6b4868e75'; // Leader - Qu·∫£n tr·ªã h·ªá th·ªëng
    } else if (
      lowerUsername.includes('manager') ||
      lowerUsername.includes('quanly')
    ) {
      return '5b7a2bcd-9f5e-4f0e-8e47-2a15bcf85e37'; // Manager - Qu·∫£n l√Ω c·∫•p cao
    } else if (
      lowerUsername.includes('supervisor') ||
      lowerUsername.includes('giamsat')
    ) {
      return '7dcd71ae-17c3-4e84-bb9f-dd96fa401976'; // Supervisor - Gi√°m s√°t vi√™n
    } else {
      return 'c2a66975-420d-4961-9edd-d5bdff89be58'; // Default Worker - Nh√¢n vi√™n v·ªá sinh
    }
  },

  // Helper function to map role name to roleId
  mapRoleNameToRoleId(roleName: string) {
    const roleIdMap: any = {
      Leader: '0ecdd2e4-d5dc-48b4-8006-03e6b4868e75',
      Manager: '5b7a2bcd-9f5e-4f0e-8e47-2a15bcf85e37',
      Supervisor: '7dcd71ae-17c3-4e84-bb9f-dd96fa401976',
      Worker: 'c2a66975-420d-4961-9edd-d5bdff89be58',
    };
    return roleIdMap[roleName] || 'c2a66975-420d-4961-9edd-d5bdff89be58';
  },

  // Helper function to map role name to description
  mapRoleNameToDescription(roleName: string) {
    const descriptionMap: any = {
      Leader: 'Qu·∫£n tr·ªã h·ªá th·ªëng',
      Manager: 'Qu·∫£n l√Ω c·∫•p cao',
      Supervisor: 'Gi√°m s√°t vi√™n v√† sinh',
      Worker: 'Nh√¢n vi√™n v·ªá sinh',
    };
    return descriptionMap[roleName] || 'Nh√¢n vi√™n v·ªá sinh';
  },

  // Helper function to map role name to position
  mapRoleNameToPosition(roleName: string) {
    const positionMap: any = {
      Leader: 'Qu·∫£n tr·ªã h·ªá th·ªëng',
      Manager: 'Qu·∫£n l√Ω c·∫•p cao',
      Supervisor: 'Gi√°m s√°t vi√™n v√† sinh',
      Worker: 'Nh√¢n vi√™n v·ªá sinh',
    };
    return positionMap[roleName] || 'Nh√¢n vi√™n v·ªá sinh';
  },
};

export default authService;
